GUI Design Notes [May 5, 2014]
-----------------------------------------------
# Widget Size and Location
In most 3D games, widget size remains unchanged on viewport resize(e.g. WoW, Blade&Soul, etc). This behaviour is however not often seen in many 2D games(e.g. Hearth Stone, Dota2) where the GUI elements usually shrink/grow with the viewport.

Fixed widget size is also a common practise in html/css context, where the widget size is specified in pixel(i.e. fixed), while the widget position is calculated(in NDC space) by some layout manager.

The benefit of (fixed size + layout manager) is that a reasonable widget layout can be maintained no matter how the viewport is changed by user.

To achieve this...
0. Widget size is given in pixel: int (width, height), it is then transformed to NDC space using viewport size. And it has to be updated on viewport resize.

1. Widget locally stores its own position in NDC space: float2 (x, y)
    a widget's position is defined as its left-upper(v0) vertex's position in NDC space.
    v0----------v1
    |           |
    |           |
    v3----------v2

2. Widget quad vertices are computable from size, viewport, and position. The vertices are later packed into a QuadBuffer structure to prepare for rendering.

3. A widget generally should not change its position directly, instead its position is updated by:
    i) layout manager
   ii) user input like dragging and mouse wheeling
  iii) animation like a small shift up/down when hovered on

    so widget.move(FloatVector(x, y)) is required.

4. Texture. To enable widget texture, widget should have a ref(e.g. texture file name) to the texture in use, as well as a srcRect describes the texture position in texture atlas. This is not a required feature for now.

5. Font display
Basic requirements....
    special chars: space, newline
    layout: center, left, right
    text area not enough: only display a subset of the original text to fit in a limited text area
    
6. Widget Occlusion


7. widget layer/depth


8. Layout Manager
Each widget has its layout strategy: 
    center 
    left-docked
    right-docked
    up-docked
    bottom-docked
    stream: from upper-left to bottom-right

################################
Borrowed from CSS

# layout values:
    fixed
    relative_to_parent(absolute in CSS)

# usecase:
root
    w1 fixed
    w2 fixed
        w3 relative to parent(w2)
    w4 relative_to_parent(root)

# Each widget has 2 layers:
layer1(logic)
    event_handlers
    
layer2(graphic)
    parent:
        ...

    display:
        fixed
        relative

    size: 
        width(pixel, given by user)
        height(pixel, calculated)

    // pixel, given by user
    margin
        stretch = -1
        left = strecth (pixel)
        top = strecth (pixel)
        right = strecth (pixel)
        bottom = strecth (pixel)


    // calculated
    positionNDC
        x, y

    positionScreen
        x, y

    // NDC quad
    NDC_QUAD
        v0 v1 v2 v3

pseudo:
curr_area = parent.size
curr_pos = parent.position
line_heights

if widget.display.relative
    // to get height, we must know the sizes of its children!
    widget.height = computeHeight(...)

    // get position
    widget.pos.x = curr_pos + widget.margin.left
    widget.pos.y = curr_pos + widget.margin.top

    line_heights.add(widget.height + widget.margin.bottom)
    curr_pos.x += widget.margin.left + widget.margin.right
    // new line
    if(curr_pos.x > parent.width)
        curr_pos.x = 0
        curr_pos.y += line_heights.max
        line_heights.empty()
        
        // overflows
        if curr_pos.y > parent.height
            stop or ?




else if widget.display.fixed

else
    ...



################################




# How Location Changes


Quad:
    NDC: width, height
    NDC: posX, posY

# UI rendering
    
    create VB of size 4 * v_number
    create IB of size 6 * v_number

    array<vertex> vertices

    foreach widget:
        widget_quad = quad(widget.size)
        // clip the quad if needed(i.e. occluded by sth)
        vertices.add(widget_quad)

        text_area = quad(widget.paddings, widget.size)

        // compute text_quad given text_area
        {
        array<quad> char_quads
        foreach char in widget.text:
            char_quads.add(char.get_dst_quad)

        text_quad = quad(char_quads, text_area.width)
        }

        // clip overflowed chars
        array<char> visible_chars
        if text_quad.height > text_area.height:
            text_quad.clip_overflowed_chars()

        visible_chars = widget.text.resize(text_quad.size())

        turn visible chars into quads
        vertices.add(quads)

        if vertices.num > VB.num
            re-construct VB
            VB.populate(vertices)
        else
            VB.populate(vertices)







